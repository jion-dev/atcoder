#!/usr/bin/env python3
import bisect,collections,copy,heapq,itertools,math,string,queue
import sys
def I(): return int(input())
def MI(): return map(int,input().split())
def LI(): return list(map(int,input().split()))
def S(): return input()
def MS(): return input().split()
def LS(): return list(input().split())



MOD = 998244353  # type: int


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
  Q = I()
  s = 1
  nums = collections.deque()
  nums.append(1)
  for _ in range(Q):
    query = LI()
    q = query[0]
    if q == 1:
      x = query[1]
      nums.append(x)
      s = (10*s + x) % MOD
    elif q == 2:
      y = nums.popleft()
      # pow(base, exp) % mod より効率よく計算される
      # ただし、modが大きい場合に限る
      s = (s- pow(10, len(nums), MOD) * y) % MOD
    else:
      print(s)

  # Failed to predict input format
  pass

if __name__ == '__main__':
  main()
